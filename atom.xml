<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘开邦&#39;S BLOG</title>
  
  <subtitle>心里要有一个坚定方向</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liukaibang.com/"/>
  <updated>2018-04-27T04:28:51.245Z</updated>
  <id>http://www.liukaibang.com/</id>
  
  <author>
    <name>刘开邦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第6课：Flask快速入门·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/28/Flask-quick-start/"/>
    <id>http://www.liukaibang.com/2018/03/28/Flask-quick-start/</id>
    <published>2018-03-28T12:42:53.000Z</published>
    <updated>2018-04-27T04:28:51.245Z</updated>
    
    <content type="html"><![CDATA[<p>Flask是一个Python编写的Web微框架，让我们可以使用Python语言快速实现一个网站或Web服务。本文参考自Flask官方文档，大部分代码引用自官方文档。</p><h2 id="安装Flask"><a href="#安装Flask" class="headerlink" title="安装Flask"></a>安装Flask</h2><p>首先我们来安装Flask。最简单的办法就是使用pip。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure></p><p>然后打开一个Python文件，输入下面的内容并运行该文件。然后访问localhost:5000，我们应当可以看到浏览器上输出了Hello Flask!。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello Flask!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><p>我们修改代码中的输出，然后查看浏览器上是否有变化。如果你照做的话，可以看到什么变化都没有。其实Flask内置了调试模式，可以自动重载代码并显示调试信息。这需要我们开启调试模式，方法很简单，设置FLASK_DEBUG环境变量，并将值设置为1。</p><p>然后再次运行程序，会看到有这样的输出。这时候如果再次修改代码，会发现这次Flask会自动重启。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Restarting <span class="keyword">with</span> stat</span><br><span class="line">* Debugger <span class="keyword">is</span> active!</span><br><span class="line">* Debugger PIN: <span class="number">157</span><span class="number">-063</span><span class="number">-180</span></span><br><span class="line">* Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p> 在上面的例子里可以看到路由的使用。如果了解Spring Web MVC的话，应该对路由很熟悉。路由通过使用Flask的app.route装饰器来设置，这类似Java的注解。<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> @app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Index Page'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, World'</span></span><br></pre></td></tr></table></figure></p><h3 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h3><p>如果希望获取<code>/article/1</code>这样的路径参数，就需要使用路径变量。路径变量的语法是<code>/path/&lt;converter:varname&gt;</code>。在路径变量前还可以使用可选的转换器，有以下几种转换器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">转换器作用</span><br><span class="line">string默认选项，接受除了斜杠之外的字符串</span><br><span class="line">int接受整数</span><br><span class="line">float接受浮点数</span><br><span class="line">path和string类似，不过可以接受带斜杠的字符串</span><br><span class="line">any匹配任何一种转换器</span><br><span class="line">uuid接受UUID字符串</span><br></pre></td></tr></table></figure></p><p>下面是Flask官方的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/user/&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User %s'</span> % username</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span><span class="params">(post_id)</span>:</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Post %d'</span> % post_id</span><br></pre></td></tr></table></figure></p><h3 id="构造URL"><a href="#构造URL" class="headerlink" title="构造URL"></a>构造URL</h3><p>在Web程序中常常需要获取某个页面的URL，在Flask中需要使用<code>url_for(&#39;方法名&#39;)</code>来构造对应方法的URL。下面是Flask官方的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@app.route(<span class="string">'/'</span>)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span> <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@app.route(<span class="string">'/login'</span>)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span> <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@app.route(<span class="string">'/user/&lt;username&gt;'</span>)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(username)</span>:</span> <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> app.test_request_context():</span><br><span class="line"><span class="meta">... </span> <span class="keyword">print</span> url_for(<span class="string">'index'</span>)</span><br><span class="line"><span class="meta">... </span> <span class="keyword">print</span> url_for(<span class="string">'login'</span>)</span><br><span class="line"><span class="meta">... </span> <span class="keyword">print</span> url_for(<span class="string">'login'</span>, next=<span class="string">'/'</span>)</span><br><span class="line"><span class="meta">... </span> <span class="keyword">print</span> url_for(<span class="string">'profile'</span>, username=<span class="string">'John Doe'</span>)</span><br><span class="line">...</span><br><span class="line">/</span><br><span class="line">/login</span><br><span class="line">/login?next=/</span><br><span class="line">/user/John%<span class="number">20</span>Doe</span><br></pre></td></tr></table></figure></p><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>如果需要处理具体的HTTP方法，在Flask中也很容易，使用<code>route</code>装饰器的<code>methods</code>参数设置即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        show_the_login_form()</span><br></pre></td></tr></table></figure></p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>Web程序中常常需要处理静态文件，在Flask中需要使用<code>url_for</code>函数并指定<code>static</code>端点名和文件名。在下面的例子中，实际的文件应放在<code>static/</code>文件夹下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">'static'</span>, filename=<span class="string">'style.css'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="模板生成"><a href="#模板生成" class="headerlink" title="模板生成"></a>模板生成</h3><p>Flask默认使用Jinja2作为模板，Flask会自动配置Jinja 模板，所以我们不需要其他配置了。默认情况下，模板文件需要放在<code>templates</code>文件夹下。</p><p>使用 Jinja 模板，只需要使用<code>render_template</code>函数并传入模板文件名和参数名即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/')</span></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>, name=name)</span><br></pre></td></tr></table></figure></p><p>相应的模板文件如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;title&gt;Hello from Flask&lt;/title&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> name %&#125;</span><br><span class="line">  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">  &lt;h1&gt;Hello, World!&lt;/h1&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h3><p>Flask 为我们预配置了一个 Logger，我们可以直接在程序中使用。这个Logger是一个标准的Python Logger，所以我们可以向标准Logger那样配置它，详情可以参考官方文档或者我的文章Python 日志输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.logger.debug(<span class="string">'A value for debugging'</span>)</span><br><span class="line">app.logger.warning(<span class="string">'A warning occurred (%d apples)'</span>, <span class="number">42</span>)</span><br><span class="line">app.logger.error(<span class="string">'An error occurred'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>在 Flask 中获取请求参数需要使用request等几个全局对象，但是这几个全局对象比较特殊，它们是 Context Locals ，其实就是 Web 上下文中局部变量的代理。虽然我们在程序中使用的是全局变量，但是对于每个请求作用域，它们都是互不相同的变量。理解了这一点，后面就非常简单了。</p><h3 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h3><p>Request 对象是一个全局对象，利用它的属性和方法，我们可以方便的获取从页面传递过来的参数。</p><p>method属性会返回HTTP方法的类似，例如post和get。form属性是一个字典，如果数据是POST类型的表单，就可以从form属性中获取。下面是 Flask 官方的例子，演示了 Request 对象的method和form属性。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST', 'GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    error = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> valid_login(request.form[<span class="string">'username'</span>],</span><br><span class="line">                       request.form[<span class="string">'password'</span>]):</span><br><span class="line">            <span class="keyword">return</span> log_the_user_in(request.form[<span class="string">'username'</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error = <span class="string">'Invalid username/password'</span></span><br><span class="line">    <span class="comment"># the code below is executed if the request method</span></span><br><span class="line">    <span class="comment"># was GET or the credentials were invalid</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, error=error)</span><br></pre></td></tr></table></figure></p><p>如果数据是由GET方法传送过来的，可以使用args属性获取，这个属性也是一个字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchword = request.args.get(<span class="string">'key'</span>, <span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>利用Flask也可以方便的获取表单中上传的文件，只需要利用request的<code>files</code>属性即可，这也是一个字典，包含了被上传的文件。如果想获取上传的文件名，可以使用<code>filename</code>属性，不过需要注意这个属性可以被客户端更改，所以并不可靠。更好的办法是利用<code>werkzeug</code>提供的<code>secure_filename</code>方法来获取安全的文件名。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        f = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">        f.save(<span class="string">'/var/www/uploads/'</span> + secure_filename(f.filename))</span><br></pre></td></tr></table></figure></p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>Flask也可以方便的处理Cookie。使用方法很简单，直接看官方的例子就行了。下面的例子是如何获取cookie。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.cookies.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="comment"># 使用 cookies.get(key) 代替 cookies[key] 避免</span></span><br><span class="line">    <span class="comment"># 得到 KeyError 如果cookie不存在</span></span><br></pre></td></tr></table></figure></p><p>如果需要发送cookie给客户端，参考下面的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(render_template(...))</span><br><span class="line">    resp.set_cookie(<span class="string">'username'</span>, <span class="string">'the username'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></p><h3 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h3><p><code>redirect</code>和<code>abort</code>函数用于重定向和返回错误页面。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort, redirect, url_for</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    abort(<span class="number">401</span>)</span><br><span class="line">    this_is_never_executed()</span><br></pre></td></tr></table></figure></p><p>默认的错误页面是一个空页面，如果需要自定义错误页面，可以使用<code>errorhandler</code>装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'page_not_found.html'</span>), <span class="number">404</span></span><br></pre></td></tr></table></figure></p><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>默认情况下，Flask会根据函数的返回值自动决定如何处理响应：如果返回值是响应对象，则直接传递给客户端；如果返回值是字符串，那么就会将字符串转换为合适的响应对象。我们也可以自己决定如何设置响应对象，方法也很简单，使用<code>make_response</code>函数即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></span><br><span class="line">    resp = make_response(render_template(<span class="string">'error.html'</span>), <span class="number">404</span>)</span><br><span class="line">    resp.headers[<span class="string">'X-Something'</span>] = <span class="string">'A value'</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></p><h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><p>我们可以使用全局对象<code>session</code>来管理用户会话。Sesison 是建立在 Cookie 技术上的，不过在 Flask 中，我们还可以为 Session 指定密钥，这样存储在 Cookie 中的信息就会被加密，从而更加安全。直接看 Flask 官方的例子吧。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, url_for, escape, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Logged in as %s'</span> % escape(session[<span class="string">'username'</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'You are not logged in'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        session[<span class="string">'username'</span>] = request.form[<span class="string">'username'</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;form method="post"&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># remove the username from the session if it's there</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the secret key.  keep this really secret:</span></span><br><span class="line">app.secret_key = <span class="string">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></span><br></pre></td></tr></table></figure></p><h3 id="模板简介"><a href="#模板简介" class="headerlink" title="模板简介"></a>模板简介</h3><p>这里简单的介绍一下Jinja 模板的使用方法，详细资料直接看原文档吧。</p><h4 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h4><p>其实Jinja模板和其他语言和框架的模板类似，反正都是通过某种语法将HTML文件中的特定元素替换为实际的值。如果使用过JSP、Thymeleaf 等模板，应该可以非常容易的学会使用Jinja模板。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask是一个Python编写的Web微框架，让我们可以使用Python语言快速实现一个网站或Web服务。本文参考自Flask官方文档，大部分代码引用自官方文档。&lt;/p&gt;
&lt;h2 id=&quot;安装Flask&quot;&gt;&lt;a href=&quot;#安装Flask&quot; class=&quot;headerlink&quot; title=&quot;安装Flask&quot;&gt;&lt;/a&gt;安装Flask&lt;/h2&gt;&lt;p&gt;首先我们来安装Flask。最简单的办法就是使用pip。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install flask&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后打开一个Python文件，输入下面的内容并运行该文件。然后访问localhost:5000，我们应当可以看到浏览器上输出了Hello Flask!。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; flask &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Flask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app = Flask(__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&#39;/&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello Flask!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app.run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&quot;调试模式&quot;&gt;&lt;a href=&quot;#调试模式&quot; class=&quot;headerlink&quot; title=&quot;调试模式&quot;&gt;&lt;/a&gt;调试模式&lt;/h3&gt;&lt;p&gt;我们修改代码中的输出，然后查看浏览器上是否有变化。如果你照做的话，可以看到什么变化都没有。其实Flask内置了调试模式，可以自动重载代码并显示调试信息。这需要我们开启调试模式，方法很简单，设置FLASK_DEBUG环境变量，并将值设置为1。&lt;/p&gt;
&lt;p&gt;然后再次运行程序，会看到有这样的输出。这时候如果再次修改代码，会发现这次Flask会自动重启。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* Restarting &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; stat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Debugger &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; active!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Debugger PIN: &lt;span class=&quot;number&quot;&gt;157&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-063&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-180&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Running on http://&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;/ (Press CTRL+C to quit)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h3&gt;&lt;p&gt; 在上面的例子里可以看到路由的使用。如果了解Spring Web MVC的话，应该对路由很熟悉。路由通过使用Flask的app.route装饰器来设置，这类似Java的注解。&lt;br&gt; &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt; @app.route(&#39;/&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Index Page&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@app.route(&#39;/hello&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello, World&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>虚拟主机通过域名跳转目录的实现方法</title>
    <link href="http://www.liukaibang.com/2018/03/28/The-realization-method-of-virtual-host-through-domain-name-jump-directory/"/>
    <id>http://www.liukaibang.com/2018/03/28/The-realization-method-of-virtual-host-through-domain-name-jump-directory/</id>
    <published>2018-03-28T11:10:08.000Z</published>
    <updated>2018-03-28T11:16:35.087Z</updated>
    
    <content type="html"><![CDATA[<p>案例一：asp语言，asp语言对应的是windows主机，目前实测可以支持的方案代码如下</p><p>1、这里用到了ASP中的<code>case</code>选择语句，根据servervariables(“HTTP_HOST”)获取的主机HTTP头，也就是域名，来判断需要跳转到哪些目录中，特别适合于二级域名的网站使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">host=lcase(request.servervariables(&quot;HTTP_HOST&quot;))  ‘取得HTTP输入的值并付值到HTOST中</span><br><span class="line">select CASE host  ‘设置跳转条件’</span><br><span class="line">CASE &quot;a.baidu.com&quot; ‘如果HOST的值是 a.baidu.com 就选择case&quot;a.baidu.com&quot;的命令访问/a目录下站点’</span><br><span class="line">response.redirect &quot;/a/&quot;</span><br><span class="line">CASE &quot;b.baidu.com&quot;</span><br><span class="line">response.redirect &quot;/b/&quot;</span><br><span class="line">case &quot;c.baidu.com&quot;  </span><br><span class="line">Server.Transfer(&quot;b/default.asp&quot;)  ‘如果不在上述特定范围’</span><br><span class="line"></span><br><span class="line">CASE ELSE</span><br><span class="line">response.redirect &quot;/else/&quot;   ‘转到else目录’</span><br><span class="line">END select</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p>案例二：php语言，php语言可以对应的是轻云服务器linux的php或者普通的虚拟主机的linux系统</p><p>1、PHP 跳转代码实现一个网站空间绑定多个域名，建立多个网站<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ($_SERVER[<span class="string">"HTTP_HOST"</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a.baidu.com"</span>:</span><br><span class="line">header(<span class="string">"location:a/"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"b.baidu.com"</span>:</span><br><span class="line">header(<span class="string">"location:b/"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"c.baidu.com"</span>:</span><br><span class="line">header(<span class="string">"location:c/"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、key-value的模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$domain_route = array(</span><br><span class="line">        ‘a.baidu.com’ =&gt; ‘a/‘,</span><br><span class="line">        ‘b.baidu.com’ =&gt; ‘b/‘,</span><br><span class="line">        ‘c.baidu.com’ =&gt; ‘c/‘,</span><br><span class="line">        ‘d.baidu.com’ =&gt; ‘main.php’,</span><br><span class="line">);</span><br><span class="line">$domain = $_SERVER[‘HTTP_HOST’];</span><br><span class="line">$target_url = $domain_route[$domain];</span><br><span class="line">header(<span class="string">"location:&#123;$target_url&#125;"</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>友情提醒：虚拟主机因为每个站点性能资源有限，要获得更好的访问效果强烈建议一个主机只放置一个站点 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;案例一：asp语言，asp语言对应的是windows主机，目前实测可以支持的方案代码如下&lt;/p&gt;
&lt;p&gt;1、这里用到了ASP中的&lt;code&gt;case&lt;/code&gt;选择语句，根据servervariables(“HTTP_HOST”)获取的主机HTTP头，也就是域名，来判断需要跳转到哪些目录中，特别适合于二级域名的网站使用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;host=lcase(request.servervariables(&amp;quot;HTTP_HOST&amp;quot;))  ‘取得HTTP输入的值并付值到HTOST中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select CASE host  ‘设置跳转条件’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CASE &amp;quot;a.baidu.com&amp;quot; ‘如果HOST的值是 a.baidu.com 就选择case&amp;quot;a.baidu.com&amp;quot;的命令访问/a目录下站点’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.redirect &amp;quot;/a/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CASE &amp;quot;b.baidu.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.redirect &amp;quot;/b/&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case &amp;quot;c.baidu.com&amp;quot;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server.Transfer(&amp;quot;b/default.asp&amp;quot;)  ‘如果不在上述特定范围’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CASE ELSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.redirect &amp;quot;/else/&amp;quot;   ‘转到else目录’&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;END select&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;案例二：php语言，php语言可以对应的是轻云服务器linux的php或者普通的虚拟主机的linux系统&lt;/p&gt;
&lt;p&gt;1、PHP 跳转代码实现一个网站空间绑定多个域名，建立多个网站&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; ($_SERVER[&lt;span class=&quot;string&quot;&gt;&quot;HTTP_HOST&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;a.baidu.com&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;location:a/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;b.baidu.com&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;location:b/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;c.baidu.com&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;location:c/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、key-value的模式&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$domain_route = array(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ‘a.baidu.com’ =&amp;gt; ‘a/‘,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ‘b.baidu.com’ =&amp;gt; ‘b/‘,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ‘c.baidu.com’ =&amp;gt; ‘c/‘,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ‘d.baidu.com’ =&amp;gt; ‘main.php’,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$domain = $_SERVER[‘HTTP_HOST’];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$target_url = $domain_route[$domain];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;location:&amp;#123;$target_url&amp;#125;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;友情提醒：虚拟主机因为每个站点性能资源有限，要获得更好的访问效果强烈建议一个主机只放置一个站点 &lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第5课：Python操作Mysql·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/24/lesson-five-how-to-learn-python/"/>
    <id>http://www.liukaibang.com/2018/03/24/lesson-five-how-to-learn-python/</id>
    <published>2018-03-24T13:11:01.000Z</published>
    <updated>2018-03-24T13:12:40.763Z</updated>
    
    <content type="html"><![CDATA[<p>开发项目，免不了和数据库打交道，这里以mysql为例，来说明python怎么进行增删改查操作</p><p>假设我们有个godeye表  字段  id  name  status<br>第一步我们需要python操作mysql用到的MySQLdb包，下载安装即可</p><p>MySQLdb模块安装：<br>pip list显示出来的名字叫MySQL-python，源码下载地址：<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" target="_blank" rel="noopener">https://pypi.python.org/pypi/MySQL-python/1.2.5</a><br>安装一般会出现找不到mysql_config的错误<br>首先你需要本机上已经安装有mysql，找到对应mysql_config的路径，然后在mysql-python源码包下找到：setup_posix.py 文件，<br>找到文件中的 mysql_config.path 将其值修改mysql_config.path = “/Applications/MAMP/Library/bin/mysql_config” 这里的路径是我本地对应文件的路径<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询数据</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn=MySQLdb.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">''</span>,db=<span class="string">'test'</span>,port=<span class="number">3306</span>)</span><br><span class="line">    cur=conn.cursor()</span><br><span class="line">    cur.execute(<span class="string">'select * from godeye'</span>)</span><br><span class="line">    rows = cur.fetchall()<span class="comment">#查询一条数据用cur.fetchone() 返回值是个元祖</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        <span class="keyword">print</span> row</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="keyword">except</span> MySQLdb.Error,e:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Mysql Error %d: %s"</span> % (e.args[<span class="number">0</span>], e.args[<span class="number">1</span>])</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#reload(sys)</span></span><br><span class="line"><span class="comment">#sys.setdefaultencoding('utf-8')</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = MySQLdb.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">''</span>, db=<span class="string">'test'</span>, port=<span class="number">3306</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line">    cur  = conn.cursor()</span><br><span class="line">     </span><br><span class="line">    time = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime() )</span><br><span class="line">    <span class="comment">#sys.exit()</span></span><br><span class="line">    value = [<span class="string">'godeye'</span>, <span class="number">0</span>, time]</span><br><span class="line">    </span><br><span class="line">    cur.execute(<span class="string">'insert into godeye (name, status, time) values (%s,%s,%s)'</span>, value)</span><br><span class="line">    </span><br><span class="line">    cur.execute(<span class="string">'update godeye set name="I am godeye" where id = 1'</span>)</span><br><span class="line"> </span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">except</span> MySQLdb.Error, e:</span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Mysql Error %d: %s"</span> % (e.args[<span class="number">0</span>], e.args[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发项目，免不了和数据库打交道，这里以mysql为例，来说明python怎么进行增删改查操作&lt;/p&gt;
&lt;p&gt;假设我们有个godeye表  字段  id  name  status&lt;br&gt;第一步我们需要python操作mysql用到的MySQLdb包，下载安装即可&lt;/p&gt;
&lt;p&gt;MySQLdb模块安装：&lt;br&gt;pip list显示出来的名字叫MySQL-python，源码下载地址：&lt;a href=&quot;https://pypi.python.org/pypi/MySQL-python/1.2.5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.python.org/pypi/MySQL-python/1.2.5&lt;/a&gt;&lt;br&gt;安装一般会出现找不到mysql_config的错误&lt;br&gt;首先你需要本机上已经安装有mysql，找到对应mysql_config的路径，然后在mysql-python源码包下找到：setup_posix.py 文件，&lt;br&gt;找到文件中的 mysql_config.path 将其值修改mysql_config.path = “/Applications/MAMP/Library/bin/mysql_config” 这里的路径是我本地对应文件的路径&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查询数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MySQLdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conn=MySQLdb.connect(host=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,user=&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,passwd=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,db=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;,port=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur=conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur.execute(&lt;span class=&quot;string&quot;&gt;&#39;select * from godeye&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rows = cur.fetchall()&lt;span class=&quot;comment&quot;&gt;#查询一条数据用cur.fetchone() 返回值是个元祖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; rows:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conn.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; MySQLdb.Error,e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Mysql Error %d: %s&quot;&lt;/span&gt; % (e.args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], e.args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#写数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MySQLdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#reload(sys)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#sys.setdefaultencoding(&#39;utf-8&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conn = MySQLdb.connect(host=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, user=&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;, passwd=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, db=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, port=&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;, charset=&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur  = conn.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time = time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;, time.localtime() )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#sys.exit()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value = [&lt;span class=&quot;string&quot;&gt;&#39;godeye&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, time]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur.execute(&lt;span class=&quot;string&quot;&gt;&#39;insert into godeye (name, status, time) values (%s,%s,%s)&#39;&lt;/span&gt;, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur.execute(&lt;span class=&quot;string&quot;&gt;&#39;update godeye set name=&quot;I am godeye&quot; where id = 1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conn.commit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cur.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    conn.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; MySQLdb.Error, e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Mysql Error %d: %s&quot;&lt;/span&gt; % (e.args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], e.args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第4课：Python类操作·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/24/lesson-four-how-to-learn-python/"/>
    <id>http://www.liukaibang.com/2018/03/24/lesson-four-how-to-learn-python/</id>
    <published>2018-03-24T12:53:37.000Z</published>
    <updated>2018-03-24T13:02:10.109Z</updated>
    
    <content type="html"><![CDATA[<p>python中一切皆为对象，对象=属性+方法，在python中，把具有相同属性和方法的对象归为一个类（class）</p><p>创建类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>:</span></span><br><span class="line">   <span class="string">'类的帮助信息'</span>   <span class="comment">#类文档字符串</span></span><br><span class="line">   class_suite  <span class="comment">#类体</span></span><br></pre></td></tr></table></figure></p><p>类的帮助信息可以通过<code>ClassName.__doc__</code>查看<br><code>class_suite</code> 由类成员，方法，数据属性组成</p><p>实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>:</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayCount</span><span class="params">(self)</span>:</span></span><br><span class="line">     <span class="keyword">print</span> <span class="string">"Total Employee %d"</span> % Employee.empCount</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">displayEmployee</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Name : "</span>, self.name,  <span class="string">", Salary: "</span>, self.salary</span><br></pre></td></tr></table></figure></p><p>创建实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emp = Employee(<span class="string">"godeye"</span>, <span class="number">2000</span>)</span><br><span class="line">emp.displayEmployee()</span><br></pre></td></tr></table></figure></p><p>返回值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name :  godeye , Salary:  <span class="number">2000</span></span><br></pre></td></tr></table></figure></p><p>类的构造函数与析构函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">      self.x = x</span><br><span class="line">      self.y = y</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">      class_name = self.__class__.__name__</span><br><span class="line">      <span class="keyword">print</span> class_name, <span class="string">"销毁"</span></span><br></pre></td></tr></table></figure></p><p>类的继承<br>语法 <code>class</code> 派生类名（基类名）：//… 基类名写作括号里<br>在继承中基类的构造（<code>__init__()</code>方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用</p><p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandPa</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'I\'m GrandPa'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">(GrandPa)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'I\'m Father!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(Father)</span>:</span></span><br><span class="line">    <span class="string">"""A simple example class"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'这是构造函数,son'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    son = Son()</span><br><span class="line">    <span class="comment"># 类型帮助信息 </span></span><br><span class="line">    print(<span class="string">'类型帮助信息: '</span>,Son.__doc__)</span><br><span class="line">    <span class="comment">#类型名称</span></span><br><span class="line">    print(<span class="string">'类型名称:'</span>,Son.__name__)</span><br><span class="line">    <span class="comment">#类型所继承的基类</span></span><br><span class="line">    print(<span class="string">'类型所继承的基类:'</span>,Son.__bases__)</span><br><span class="line">    <span class="comment">#类型字典</span></span><br><span class="line">    print(<span class="string">'类型字典:'</span>,Son.__dict__)</span><br><span class="line">    <span class="comment">#类型所在模块</span></span><br><span class="line">    print(<span class="string">'类型所在模块:'</span>,Son.__module__)</span><br><span class="line">    <span class="comment">#实例类型</span></span><br><span class="line">    print(<span class="string">'实例类型:'</span>,Son().__class__)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python中一切皆为对象，对象=属性+方法，在python中，把具有相同属性和方法的对象归为一个类（class）&lt;/p&gt;
&lt;p&gt;创建类&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassName&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&#39;类的帮助信息&#39;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;#类文档字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   class_suite  &lt;span class=&quot;comment&quot;&gt;#类体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类的帮助信息可以通过&lt;code&gt;ClassName.__doc__&lt;/code&gt;查看&lt;br&gt;&lt;code&gt;class_suite&lt;/code&gt; 由类成员，方法，数据属性组成&lt;/p&gt;
&lt;p&gt;实例&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Employee&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   empCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, name, salary)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.salary = salary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Employee.empCount += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;displayCount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Total Employee %d&quot;&lt;/span&gt; % Employee.empCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;displayEmployee&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Name : &quot;&lt;/span&gt;, self.name,  &lt;span class=&quot;string&quot;&gt;&quot;, Salary: &quot;&lt;/span&gt;, self.salary&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建实例&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;emp = Employee(&lt;span class=&quot;string&quot;&gt;&quot;godeye&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;emp.displayEmployee()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回值：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Name :  godeye , Salary:  &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类的构造函数与析构函数&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( self, x=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, y=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.x = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      self.y = y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__del__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      class_name = self.__class__.__name__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; class_name, &lt;span class=&quot;string&quot;&gt;&quot;销毁&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类的继承&lt;br&gt;语法 &lt;code&gt;class&lt;/code&gt; 派生类名（基类名）：//… 基类名写作括号里&lt;br&gt;在继承中基类的构造（&lt;code&gt;__init__()&lt;/code&gt;方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用&lt;/p&gt;
&lt;p&gt;实例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GrandPa&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;I\&#39;m GrandPa&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Father&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(GrandPa)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;I\&#39;m Father!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Father)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;A simple example class&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = &lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;这是构造函数,son&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    son = Son()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 类型帮助信息 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;类型帮助信息: &#39;&lt;/span&gt;,Son.__doc__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#类型名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;类型名称:&#39;&lt;/span&gt;,Son.__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#类型所继承的基类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;类型所继承的基类:&#39;&lt;/span&gt;,Son.__bases__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#类型字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;类型字典:&#39;&lt;/span&gt;,Son.__dict__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#类型所在模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;类型所在模块:&#39;&lt;/span&gt;,Son.__module__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#实例类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;实例类型:&#39;&lt;/span&gt;,Son().__class__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第3课：Python列表与字典(数组)操作·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/24/lesson-three-how-to-learn-python/"/>
    <id>http://www.liukaibang.com/2018/03/24/lesson-three-how-to-learn-python/</id>
    <published>2018-03-24T12:33:32.000Z</published>
    <updated>2018-03-24T12:47:29.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h2><p>Python中是没有数组的概念的，但是在我看来，列表就是数组，他和数组的操作几乎一模一样</p><p>下面我们先来定义一个列表：<br><code>a=[0,1,2]</code>,这时<code>a[0]=0, a[1]=1, a[2]=2</code><br>如果数组a想定义为0到999怎么办?这时可通过<code>a = range(0, 1000)</code>实现。或省略为<code>a = range(1000)</code>.如果想定义1000长度的<code>a</code>,初始值全为<code>0</code>,则 <code>a = [0 for x in range(0, 1000)]</code></p><p>学过数组的人都知道，数组不仅有像上面的一维数组，还有多维数组，那么二维列表该怎么写呢？<br>直接定义 <code>a=[[1,1],[1,1]]</code>，这里定义了一个<code>2*2</code>的，且初始为<code>0</code>的二维数组。<br>间接定义 <code>a=[[0 for x in range(10)] for y in range(10)]</code>，这里定义了<code>10*10</code>初始为<code>0</code>的二维数组<br>当然了，数组元素也可以是列表或者其他复杂数据类型</p><p>下面给出一些常见的列表操作，可以满足99%的项目</p><p>1.创建列表(list)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godeye = [<span class="string">'a'</span>,<span class="number">1</span>,(<span class="string">'god'</span>,<span class="string">'eye'</span>)]</span><br></pre></td></tr></table></figure></p><p>你可能注意到<code>(&#39;god&#39;,&#39;eye&#39;)</code> 这个元素在python中叫元组<code>(tuple)</code><br>Python的元组与列表类似，不同之处在于元组的元素不能修改；元组使用小括号()，列表使用方括号[]；元组创建很简单，只需要在括号中添加元素，并使用逗号(,)隔开即可<br>创建空元组，例：<code>godeye = ();</code><br>元组中只有一个元素时，需要在元素后面添加逗号，例如：<code>godeye = (50,);</code><br>元组与字符串类似，下标索引从0开始，可以进行截取，组合等</p><p>2.更改列表元素值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">godeye = [<span class="string">'god'</span>, <span class="string">'eye'</span>]</span><br><span class="line">godeye[<span class="number">0</span>]=<span class="string">"people"</span>;</span><br><span class="line"><span class="keyword">print</span> godeye;</span><br></pre></td></tr></table></figure></p><p>3.删除列表元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">godeye = [<span class="string">'god'</span>, <span class="string">'eye'</span>]</span><br><span class="line"><span class="keyword">del</span> godeye[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><p>4.列表截取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">godeye = [<span class="string">'god'</span>, <span class="string">'God'</span>, <span class="string">'GOD!'</span>];</span><br><span class="line"><span class="keyword">print</span> godeye[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">print</span> godeye[<span class="number">-2</span>];</span><br><span class="line"><span class="keyword">print</span> godeye[<span class="number">1</span>:];</span><br><span class="line">返回值</span><br><span class="line">GOD!</span><br><span class="line">God</span><br><span class="line">[<span class="string">'God'</span>, <span class="string">'GOD!'</span>]</span><br></pre></td></tr></table></figure></p><p>5.其他列表方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list.append(obj) 在列表末尾添加新的对象</span><br><span class="line">list.count(obj) 统计某个元素在列表中出现的次数</span><br><span class="line">list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)</span><br><span class="line">list.index(obj) 从列表中找出某个值第一个匹配项的索引位置，索引从<span class="number">0</span>开始</span><br><span class="line">list.insert(index, obj) 将对象插入列表</span><br><span class="line">list.pop(obj=list[<span class="number">-1</span>]) 移除列表中的一个元素(默认最后一个元素)，并且返回该元素的值</span><br><span class="line">list.remove(obj) 移除列表中某个值的第一个匹配项</span><br><span class="line">list.reverse() 反向列表中元素，倒转</span><br><span class="line">list.sort([func]) 对原列表进行排序</span><br></pre></td></tr></table></figure></p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典(dictionary)是除列表之外python中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取<br>字典由键和对应的值组成。字典也被称作关联数组或哈希表。基本语法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godeye = &#123;<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>字典概念和IOS比较像，类似于PHP中的关联数组</p><p>字典操作：<br>1.访问字典里的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>: <span class="string">'Zara'</span>, <span class="string">'age'</span>: <span class="number">7</span>, <span class="string">'class'</span>: <span class="string">'First'</span>&#125;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['name']: "</span>, dict[<span class="string">'name'</span>];</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['age']: "</span>, dict[<span class="string">'age'</span>];</span><br></pre></td></tr></table></figure></p><p>2.修改字典元素值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>: <span class="string">'godeye'</span>, <span class="string">'age'</span>: <span class="number">7</span>, <span class="string">'class'</span>: <span class="string">'First'</span>&#125;;</span><br><span class="line">dict[<span class="string">"age"</span>] = <span class="number">27</span>; <span class="comment">#修改已有键的值</span></span><br><span class="line">dict[<span class="string">"school"</span>] = <span class="string">"wutong"</span>; <span class="comment">#增加新的键/值对</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['age']: "</span>, dict[<span class="string">'age'</span>];</span><br><span class="line"><span class="keyword">print</span> <span class="string">"dict['school']: "</span>, dict[<span class="string">'school'</span>];</span><br></pre></td></tr></table></figure></p><p>3.删除字段元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> dict[<span class="string">'name'</span>]; <span class="comment"># 删除键是'name'的条目</span></span><br><span class="line">dict.clear(); <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict ; <span class="comment"># 删除词典</span></span><br></pre></td></tr></table></figure></p><p>4.其他字典方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmp(dict1, dict2) 比较两个字典元素。</span><br><span class="line">len(dict) 计算字典元素个数，即键的总数。</span><br><span class="line">str(dict) 输出字典可打印的字符串表示。</span><br><span class="line">type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。</span><br><span class="line">radiansdict.clear() 删除字典内所有元素</span><br><span class="line">radiansdict.copy() 返回一个字典的浅复制</span><br><span class="line">radiansdict.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</span><br><span class="line">radiansdict.get(key, default=<span class="keyword">None</span>) 返回指定键的值，如果值不在字典中返回default值</span><br><span class="line">radiansdict.has_key(key) 如果键在字典dict里返回true，否则返回false</span><br><span class="line">radiansdict.items() 以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">radiansdict.keys() 以列表返回一个字典所有的键</span><br><span class="line">radiansdict.setdefault(key, default=<span class="keyword">None</span>) 和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为default</span><br><span class="line">radiansdict.update(dict2) 把字典dict2的键/值对更新到dict里</span><br><span class="line">radiansdict.values() 以列表返回字典中的所有值</span><br></pre></td></tr></table></figure></p><p>5.字典遍历<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">    <span class="keyword">print</span> str(key) + <span class="string">'---'</span>+str(value)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表-list&quot;&gt;&lt;a href=&quot;#列表-list&quot; class=&quot;headerlink&quot; title=&quot;列表(list)&quot;&gt;&lt;/a&gt;列表(list)&lt;/h2&gt;&lt;p&gt;Python中是没有数组的概念的，但是在我看来，列表就是数组，他和数组的操作几乎一模一样&lt;/p&gt;
&lt;p&gt;下面我们先来定义一个列表：&lt;br&gt;&lt;code&gt;a=[0,1,2]&lt;/code&gt;,这时&lt;code&gt;a[0]=0, a[1]=1, a[2]=2&lt;/code&gt;&lt;br&gt;如果数组a想定义为0到999怎么办?这时可通过&lt;code&gt;a = range(0, 1000)&lt;/code&gt;实现。或省略为&lt;code&gt;a = range(1000)&lt;/code&gt;.如果想定义1000长度的&lt;code&gt;a&lt;/code&gt;,初始值全为&lt;code&gt;0&lt;/code&gt;,则 &lt;code&gt;a = [0 for x in range(0, 1000)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;学过数组的人都知道，数组不仅有像上面的一维数组，还有多维数组，那么二维列表该怎么写呢？&lt;br&gt;直接定义 &lt;code&gt;a=[[1,1],[1,1]]&lt;/code&gt;，这里定义了一个&lt;code&gt;2*2&lt;/code&gt;的，且初始为&lt;code&gt;0&lt;/code&gt;的二维数组。&lt;br&gt;间接定义 &lt;code&gt;a=[[0 for x in range(10)] for y in range(10)]&lt;/code&gt;，这里定义了&lt;code&gt;10*10&lt;/code&gt;初始为&lt;code&gt;0&lt;/code&gt;的二维数组&lt;br&gt;当然了，数组元素也可以是列表或者其他复杂数据类型&lt;/p&gt;
&lt;p&gt;下面给出一些常见的列表操作，可以满足99%的项目&lt;/p&gt;
&lt;p&gt;1.创建列表(list)&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;godeye = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,(&lt;span class=&quot;string&quot;&gt;&#39;god&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;eye&#39;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可能注意到&lt;code&gt;(&amp;#39;god&amp;#39;,&amp;#39;eye&amp;#39;)&lt;/code&gt; 这个元素在python中叫元组&lt;code&gt;(tuple)&lt;/code&gt;&lt;br&gt;Python的元组与列表类似，不同之处在于元组的元素不能修改；元组使用小括号()，列表使用方括号[]；元组创建很简单，只需要在括号中添加元素，并使用逗号(,)隔开即可&lt;br&gt;创建空元组，例：&lt;code&gt;godeye = ();&lt;/code&gt;&lt;br&gt;元组中只有一个元素时，需要在元素后面添加逗号，例如：&lt;code&gt;godeye = (50,);&lt;/code&gt;&lt;br&gt;元组与字符串类似，下标索引从0开始，可以进行截取，组合等&lt;/p&gt;
&lt;p&gt;2.更改列表元素值&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;godeye = [&lt;span class=&quot;string&quot;&gt;&#39;god&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;eye&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;godeye[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]=&lt;span class=&quot;string&quot;&gt;&quot;people&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; godeye;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.删除列表元素&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;godeye = [&lt;span class=&quot;string&quot;&gt;&#39;god&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;eye&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; godeye[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.列表截取&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;godeye = [&lt;span class=&quot;string&quot;&gt;&#39;god&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;God&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;GOD!&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; godeye[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; godeye[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; godeye[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GOD!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;God&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;God&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;GOD!&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第2课：Python字符串处理·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/24/lesson-two-how-to-learn-python/"/>
    <id>http://www.liukaibang.com/2018/03/24/lesson-two-how-to-learn-python/</id>
    <published>2018-03-24T04:23:15.000Z</published>
    <updated>2018-03-24T11:24:09.856Z</updated>
    
    <content type="html"><![CDATA[<p>在Python里，任何东西都可以看做对象，甚至是一个字符串<br>字符串可以用单引号或者双引号包起来<br>而针对字符串的处理函数可以直接用<code>string.func</code>调用</p><p>下面列出字符串常用处理，大部分项目都可以无忧</p><p>1.去空格及特殊符号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"www.liukaibang.com"</span></span><br><span class="line">s.strip().lstrip().rstrip(<span class="string">','</span>)</span><br></pre></td></tr></table></figure></p><p>2.连接字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"www.liukaibang.com"</span></span><br><span class="line">ss = <span class="string">"lkb"</span></span><br><span class="line">s += ss</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><p>3.查找字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"www.liukaibang.com"</span></span><br><span class="line">nPos = s.index(<span class="string">"o"</span>)</span><br><span class="line"><span class="keyword">print</span> nPos</span><br></pre></td></tr></table></figure></p><p>4.比较字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"www.liukaibang"</span></span><br><span class="line">s2 = <span class="string">'liukaibang'</span></span><br><span class="line"><span class="keyword">print</span> cmp(s,s2)</span><br></pre></td></tr></table></figure></p><p>5.扫描字符串是否包含指定的字符<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'liukaibang.com'</span></span><br><span class="line">s2 = <span class="string">'com'</span></span><br><span class="line"><span class="keyword">print</span> len(s1 <span class="keyword">and</span> s2)</span><br></pre></td></tr></table></figure></p><p>6.字符串长度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'liukaibang'</span></span><br><span class="line"><span class="keyword">print</span> len(s)</span><br></pre></td></tr></table></figure></p><p>7.字符串大小写转换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'liukaibang'</span></span><br><span class="line">s = s1.upper()  大写</span><br><span class="line"><span class="comment">#s = s1.lower() 小写</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><p>8.翻转字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'liukaibang'</span></span><br><span class="line">s = s[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></p><p>9.查找字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'liukaibang.com'</span></span><br><span class="line">s2 = <span class="string">'com'</span></span><br><span class="line"><span class="keyword">print</span> s1.find(s2)</span><br></pre></td></tr></table></figure></p><p>可能有人注意到，上面有个<code>index</code> 他们有什么不同呢？<br>find()方法：查找子字符串，若找到返回从<code>0</code>开始的下标值，若找不到返回<code>-1</code><br><code>index</code>方法是在字符串里查找子串第一次出现的位置，类似字符串的find方法，不过比find方法更好的是，如果查找不到子串，会抛出异常，而不是返回<code>-1</code><br><code>rfind</code>和<code>rindex</code>方法用法和上面一样，只是从字符串的末尾开始查找<br>10.字符串分割 相当于列表(数组)转字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="string">'-'</span></span><br><span class="line">mylist = [<span class="string">'America'</span>,<span class="string">'Russia'</span>,<span class="string">'India'</span>,<span class="string">'China'</span>]</span><br><span class="line"><span class="keyword">print</span> hello.join(mylist)</span><br></pre></td></tr></table></figure></p><p>11.字符串转列表(数组)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'1,2,3'</span></span><br><span class="line"><span class="keyword">print</span> str.split(<span class="string">','</span>)</span><br></pre></td></tr></table></figure></p><p>12.字符串截取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'0123456789'</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">0</span>:<span class="number">3</span>] <span class="comment">#截取第一位到第三位的字符</span></span><br><span class="line"><span class="keyword">print</span> str[:] <span class="comment">#截取字符串的全部字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">6</span>:] <span class="comment">#截取第七个字符到结尾</span></span><br><span class="line"><span class="keyword">print</span> str[:<span class="number">-3</span>] <span class="comment">#截取从头开始到倒数第三个字符之前</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>] <span class="comment">#截取第三个字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">-1</span>] <span class="comment">#截取倒数第一个字符</span></span><br><span class="line"><span class="keyword">print</span> str[::<span class="number">-1</span>] <span class="comment">#创造一个与原字符串顺序相反的字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:<span class="number">-1</span>] <span class="comment">#截取倒数第三位与倒数第一位之前的字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">-3</span>:] <span class="comment">#截取倒数第三位到结尾</span></span><br><span class="line"><span class="keyword">print</span> str[:<span class="number">-5</span>:<span class="number">-3</span>] <span class="comment">#逆序截取</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Python里，任何东西都可以看做对象，甚至是一个字符串&lt;br&gt;字符串可以用单引号或者双引号包起来&lt;br&gt;而针对字符串的处理函数可以直接用&lt;code&gt;string.func&lt;/code&gt;调用&lt;/p&gt;
&lt;p&gt;下面列出字符串常用处理，大部分项目都可以无忧&lt;/p&gt;
&lt;p&gt;1.去空格及特殊符号&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;www.liukaibang.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.strip().lstrip().rstrip(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.连接字符串&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;www.liukaibang.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ss = &lt;span class=&quot;string&quot;&gt;&quot;lkb&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s += ss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.查找字符&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;www.liukaibang.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nPos = s.index(&lt;span class=&quot;string&quot;&gt;&quot;o&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; nPos&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.比较字符串&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;www.liukaibang&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s2 = &lt;span class=&quot;string&quot;&gt;&#39;liukaibang&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; cmp(s,s2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5.扫描字符串是否包含指定的字符&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s1 = &lt;span class=&quot;string&quot;&gt;&#39;liukaibang.com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s2 = &lt;span class=&quot;string&quot;&gt;&#39;com&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; len(s1 &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; s2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.字符串长度&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&#39;liukaibang&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; len(s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7.字符串大小写转换&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s1 = &lt;span class=&quot;string&quot;&gt;&#39;liukaibang&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = s1.upper()  大写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#s = s1.lower() 小写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;8.翻转字符串&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&#39;liukaibang&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = s[::&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第1课：邂逅Python·《Python跟我学》</title>
    <link href="http://www.liukaibang.com/2018/03/24/lesson-one-how-to-learn-python/"/>
    <id>http://www.liukaibang.com/2018/03/24/lesson-one-how-to-learn-python/</id>
    <published>2018-03-24T03:21:45.000Z</published>
    <updated>2018-03-24T11:25:37.340Z</updated>
    
    <content type="html"><![CDATA[<p>人常说，学多难精，学精难多，如果又多又精，肯定会有其他的缺陷，比如java，貌似什么都能做，但是编译起来的龟速让人抓狂，而Python貌似是例外，上得厅堂，下得厨房，几乎是万能的，客户单，网页，人工智能，数学计算，样样精通，还不来学</p><h2 id="邂逅Python"><a href="#邂逅Python" class="headerlink" title="邂逅Python"></a>邂逅Python</h2><p>Python可以说是一种万能的脚本语言，而且在各个领域都表现优秀，这个是很难得的<br>Python是一门具有强类型(即变量类型是强制要求的)、动态性、隐式类型(不需要做变量声明)、大小写敏感(var和VAR代表了不同的变量)以及面向对象(一切皆为对象)等特点的编程语言</p><p>初学者可能会发现python有两个大版本，<code>2.7</code>和<code>3.0</code>  就目前形势来说，建议学习<code>2.7</code>,因为<code>3.0</code>比较新，而且很多东西不向下兼容，网上资料比较少，开发中遇到问题比较难在网上找到解决方案</p><p>Python比较令人不爽的地方是对格式非常严格，如果tab  空格打错或者代码没对齐，都有可能运行不通过，而在编写方面在说，我觉得他最大的优点是简洁高效，就像汉语一样，用简单的语句可以表示很复杂的意思。</p><p>说起python，不得不说Perl。据说Python的作者就是在用Perl的过程中发现，Perl实在太难用了，今天写的代码，如果逻辑稍微复杂点，若干天后可能自己都看不懂了。于是python诞生了，他是那么的简洁优雅，甚至有点洁癖，可能是Perl造成的阴影。</p><p>下面是个Python的简单例子，打印Hello, World!，其中第二行的<code># -*- coding: UTF-8 -*-</code>挺重要，设置编码，防止乱码，实际的打印语句只有第三行一行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello, World!"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人常说，学多难精，学精难多，如果又多又精，肯定会有其他的缺陷，比如java，貌似什么都能做，但是编译起来的龟速让人抓狂，而Python貌似是例外，上得厅堂，下得厨房，几乎是万能的，客户单，网页，人工智能，数学计算，样样精通，还不来学&lt;/p&gt;
&lt;h2 id=&quot;邂逅Python&quot;&gt;&lt;a href=&quot;#邂逅Python&quot; class=&quot;headerlink&quot; title=&quot;邂逅Python&quot;&gt;&lt;/a&gt;邂逅Python&lt;/h2&gt;&lt;p&gt;Python可以说是一种万能的脚本语言，而且在各个领域都表现优秀，这个是很难得的&lt;br&gt;Python是一门具有强类型(即变量类型是强制要求的)、动态性、隐式类型(不需要做变量声明)、大小写敏感(var和VAR代表了不同的变量)以及面向对象(一切皆为对象)等特点的编程语言&lt;/p&gt;
&lt;p&gt;初学者可能会发现python有两个大版本，&lt;code&gt;2.7&lt;/code&gt;和&lt;code&gt;3.0&lt;/code&gt;  就目前形势来说，建议学习&lt;code&gt;2.7&lt;/code&gt;,因为&lt;code&gt;3.0&lt;/code&gt;比较新，而且很多东西不向下兼容，网上资料比较少，开发中遇到问题比较难在网上找到解决方案&lt;/p&gt;
&lt;p&gt;Python比较令人不爽的地方是对格式非常严格，如果tab  空格打错或者代码没对齐，都有可能运行不通过，而在编写方面在说，我觉得他最大的优点是简洁高效，就像汉语一样，用简单的语句可以表示很复杂的意思。&lt;/p&gt;
&lt;p&gt;说起python，不得不说Perl。据说Python的作者就是在用Perl的过程中发现，Perl实在太难用了，今天写的代码，如果逻辑稍微复杂点，若干天后可能自己都看不懂了。于是python诞生了，他是那么的简洁优雅，甚至有点洁癖，可能是Perl造成的阴影。&lt;/p&gt;
&lt;p&gt;下面是个Python的简单例子，打印Hello, World!，其中第二行的&lt;code&gt;# -*- coding: UTF-8 -*-&lt;/code&gt;挺重要，设置编码，防止乱码，实际的打印语句只有第三行一行&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown 语法整理大集合2018</title>
    <link href="http://www.liukaibang.com/2018/03/17/Markdown-syntax-collate-large-collection-2018/"/>
    <id>http://www.liukaibang.com/2018/03/17/Markdown-syntax-collate-large-collection-2018/</id>
    <published>2018-03-17T04:15:11.000Z</published>
    <updated>2018-03-17T07:58:03.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。本文能使读者轻松了解简书、GitHub等平台对 Markdown 语法的支持，了解其优点和不足。能够在选择时正确取舍，使用时得心应手。同时，Markdown支持嵌入<code>html</code>标签。注意：Markdown使用<code>#</code>、<code>+</code>、<code>*</code>等符号来标记，符号后面必须跟上 至少1个空格才有效！</p><h2 id="1-常用部分"><a href="#1-常用部分" class="headerlink" title="1.常用部分"></a>1.常用部分</h2><h3 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h3><ul><li>[h1~h6]<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ~ ######</span><br></pre></td></tr></table></figure></li></ul><p>一般#作为文章大标题，只有一个，### 作为段落标题。<br>注：# 后面保持空格</p><ul><li>上下文标题(分级标题)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AAA</span><br><span class="line">===</span><br><span class="line">BBB</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>注：<code>=</code> <code>-</code> 最少可以只写一个，兼容性一般</p><ul><li>TOC<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure></li></ul><p>注：根据标题生成目录，兼容性一般</p><h3 id="1-2-强调"><a href="#1-2-强调" class="headerlink" title="1.2 强调"></a>1.2 强调</h3><ul><li><p>斜体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">_</span><br></pre></td></tr></table></figure></li><li><p>加粗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**</span><br></pre></td></tr></table></figure></li><li><p>删除线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~</span><br></pre></td></tr></table></figure></li></ul><p>注：两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果：<br><strong>加粗文本</strong> 或者 <strong>加粗文本</strong><br><em>斜体文本</em>  或者<em>斜体文本</em><br><del>删除文本</del></p><h3 id="1-3-代码块"><a href="#1-3-代码块" class="headerlink" title="1.3 代码块"></a>1.3 代码块</h3><ul><li><p>代码块标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```</span><br></pre></td></tr></table></figure></li><li><p>代码块缩进表示法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tab 或四个空格</span><br></pre></td></tr></table></figure></li><li><p>语法高亮显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```语言</span><br><span class="line">//注意语言前面有空格</span><br><span class="line">这里是代码</span><br></pre></td></tr></table></figure></li></ul><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是行内代码`onCreate(Bundle savedInstanceState)`的例子。</span><br><span class="line"></span><br><span class="line">这是代码块和语法高亮：</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">// 注意java前面有空格</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果</p><p>这是行内代码<code>onCreate(Bundle savedInstanceState)</code>的例子。</p><p>这是代码块和语法高亮：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意java前面有空格</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内联代码块(行内标记)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4-表格"><a href="#1-4-表格" class="headerlink" title="1.4 表格"></a>1.4 表格</h3><ul><li><p>表格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|     a     |        b        |      c       |</span><br><span class="line">|:---------:|:--------------- | ------------:|</span><br><span class="line">|   居中    | 左对齐           |       右对齐 |</span><br><span class="line">| ========= | =============== | ============ |</span><br></pre></td></tr></table></figure></li><li><p>简约写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a  | b | c  </span><br><span class="line">:-:|:- |-:</span><br><span class="line">    居中    |     左对齐      |   右对齐    </span><br><span class="line">============|=================|=============</span><br></pre></td></tr></table></figure></li><li><p>html表格<br><a href="http://www.tablesgenerator.com" target="_blank" rel="noopener">http://www.tablesgenerator.com</a></p></li></ul><h3 id="1-5-链接"><a href="#1-5-链接" class="headerlink" title="1.5 链接"></a>1.5 链接</h3><ul><li><p>内链式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度1](http://www.baidu.com/&quot;百度一下&quot;)&#123;:target=&quot;_blank&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度2][2]&#123;:target=&quot;_blank&quot;&#125;</span><br><span class="line">[2]: http://www.baidu.com/  &quot;百度二下&quot;</span><br></pre></td></tr></table></figure></li><li><p>邮箱链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxx@outlook.com&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-6-图片"><a href="#1-6-图片" class="headerlink" title="1.6 图片"></a>1.6 图片</h3><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure></p><p>链接又分为<code>行内式</code>、<code>参考式</code>和 <code>自动链接</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这是行内式链接：[刘开邦&apos;s BLOG](http://liukaibang.github.io)。</span><br><span class="line"></span><br><span class="line">这是参考式链接：[刘开邦&apos;s BLOG][url]，其中url为链接标记，可置于文中任意位置。</span><br><span class="line"></span><br><span class="line">[url]: http://liukaibang.github.io/ &quot;刘开邦&apos;s BLOG&quot;</span><br><span class="line"></span><br><span class="line">链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</span><br><span class="line"></span><br><span class="line">这是自动链接：直接使用`&lt;&gt;`括起来&lt;http://liukaibang.github.io&gt;</span><br><span class="line"></span><br><span class="line">这是图片：![][avatar]</span><br><span class="line"></span><br><span class="line">[avatar]: https://q1.qlogo.cn/g?b=qq&amp;nk=203608168&amp;s=100</span><br></pre></td></tr></table></figure><p>效果：<br>这是行内式链接：<a href="http://liukaibang.github.io" target="_blank" rel="noopener">刘开邦’s BLOG</a>。</p><p>这是参考式链接：<a href="http://liukaibang.github.io/" title="刘开邦&#39;s BLOG" target="_blank" rel="noopener">刘开邦’s BLOG</a>，其中url为链接标记，可置于文中任意位置。</p><p>链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="http://liukaibang.github.io" target="_blank" rel="noopener">http://liukaibang.github.io</a></p><p>这是图片：<img src="https://q1.qlogo.cn/g?b=qq&amp;nk=203608168&amp;s=100" alt=""></p><ul><li><p>内链式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![name](./01.png &apos;描述&apos;)</span><br></pre></td></tr></table></figure></li><li><p>引用式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![name][01]</span><br><span class="line">[01]: ./01.png &apos;描述&apos;</span><br></pre></td></tr></table></figure></li><li><p>图片带有链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[![name](./01.png &apos;百度&apos;)](http://www.baidu.com)&#123;:target=&quot;_blank&quot;&#125;   </span><br><span class="line"></span><br><span class="line">[![name](./01.png &apos;百度&apos;)][5]&#123;:target=&quot;_blank&quot;&#125; </span><br><span class="line">[5]: http://www.baidu.com</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-其他部分"><a href="#2-其他部分" class="headerlink" title="2.其他部分"></a>2.其他部分</h2><h3 id="2-1-序表"><a href="#2-1-序表" class="headerlink" title="2.1 序表"></a>2.1 序表</h3><ul><li>无序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line">* two</span><br><span class="line">* three</span><br></pre></td></tr></table></figure></li></ul><p>注：<code>+</code> <code>-</code>可替代<code>*</code></p><ul><li><p>有序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. one</span><br><span class="line">2. two</span><br><span class="line">3. three</span><br></pre></td></tr></table></figure></li><li><p>序表嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* one</span><br><span class="line">    * two</span><br><span class="line">    * three</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. one</span><br><span class="line">    2. two</span><br><span class="line">    3. three</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-清单"><a href="#2-2-清单" class="headerlink" title="2.2 清单"></a>2.2 清单</h3><ul><li>清单选项表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [x] 选项一 </span><br><span class="line">- [ ] 选项二</span><br></pre></td></tr></table></figure></li></ul><p>效果</p><ul><li style="list-style: none"><input type="checkbox" checked> 选项一 </li><li style="list-style: none"><input type="checkbox"> 选项二<h3 id="2-3-引用"><a href="#2-3-引用" class="headerlink" title="2.3 引用"></a>2.3 引用</h3>引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</li></ul><p>常见的引用写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用    //在`&gt;`后面有 1 个空格</span><br><span class="line">&gt; </span><br><span class="line">&gt;     这是引用的代码块形式    //在`&gt;`后面有 5 个空格</span><br><span class="line">&gt;     </span><br><span class="line">&gt; 代码例子：</span><br><span class="line">&gt;   </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt; 一级引用</span><br><span class="line">&gt; &gt; 二级引用</span><br><span class="line">&gt; &gt; &gt; 三级引用</span><br><span class="line"></span><br><span class="line">&gt; #### 这是一个四级标题</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1. 这是第一行列表项</span><br><span class="line">&gt; 2. 这是第二行列表项</span><br></pre></td></tr></table></figure></p><p>效果</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol></blockquote><h3 id="2-4-锚点"><a href="#2-4-锚点" class="headerlink" title="2.4 锚点"></a>2.4 锚点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[公式标题锚点](#1)</span><br><span class="line"></span><br><span class="line">[需要跳转的目录] &#123;#1&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-脚注（注释）"><a href="#2-5-脚注（注释）" class="headerlink" title="2.5 脚注（注释）"></a>2.5 脚注（注释）</h3><p>使用<code>[^]</code>来定义脚注：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line"></span><br><span class="line">[^1]: Markdown是一种纯文本标记语言。</span><br></pre></td></tr></table></figure></p><p>效果<br>Markdown<a href="Markdown是一种纯文本标记语言。">^1</a></p><h3 id="2-6-表情"><a href="#2-6-表情" class="headerlink" title="2.6 表情"></a>2.6 表情</h3><ul><li>github表情<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:smile: :bowtie: :+1: :clap: :octocat:</span><br></pre></td></tr></table></figure></li></ul><p><code>https://www.webpagefx.com/tools/emoji-cheat-sheet/</code></p><h3 id="2-7-分隔符"><a href="#2-7-分隔符" class="headerlink" title="2.7 分隔符"></a>2.7 分隔符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>注：在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。<br>效果均为一条分割线：</p><h2 id=""><a href="#" class="headerlink" title="*"></a><em>*</em></h2><hr><h2 id="3-常用弥补Markdown的Html标签"><a href="#3-常用弥补Markdown的Html标签" class="headerlink" title="3.常用弥补Markdown的Html标签"></a>3.常用弥补Markdown的Html标签</h2><h3 id="3-1-字体"><a href="#3-1-字体" class="headerlink" title="3.1 字体"></a>3.1 字体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">size</span>=<span class="string">"6"</span>&gt;</span>字体及字体颜色和大小<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000ff"</span>&gt;</span>字体颜色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font></p><p><font color="#0000ff">字体颜色</font></p><h3 id="3-2-换行"><a href="#3-2-换行" class="headerlink" title="3.2 换行"></a>3.2 换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用html标签`&lt;br/&gt;`&lt;br/&gt;换行</span><br></pre></td></tr></table></figure><p>效果<br>使用html标签<code>&lt;br/&gt;</code><br>换行</p><h3 id="3-3-文本对齐方式"><a href="#3-3-文本对齐方式" class="headerlink" title="3.3 文本对齐方式"></a>3.3 文本对齐方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;</span><br><span class="line">&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>效果</p><p></p><p align="left">居左文本</p><p></p><p></p><p align="center">居中文本</p><p></p><p></p><p align="right">居右文本</p><p></p><h3 id="3-4下划线"><a href="#3-4下划线" class="headerlink" title="3.4下划线"></a>3.4下划线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果</p><h2 id="下划线文本"><a href="#下划线文本" class="headerlink" title="下划线文本"></a><u>下划线文本</u></h2><p>That’s all, Enjoy it!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。本文能使读者轻松了解简书、GitHub等平台对 Markdown 语法的支持，了解其优点和不足。能够在选择时正确取舍，使用时得心应手。同时，Markdown支持嵌入&lt;code&gt;html&lt;/code&gt;标签。注意：Markdown使用&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;等符号来标记，符号后面必须跟上 至少1个空格才有效！&lt;/p&gt;
&lt;h2 id=&quot;1-常用部分&quot;&gt;&lt;a href=&quot;#1-常用部分&quot; class=&quot;headerlink&quot; title=&quot;1.常用部分&quot;&gt;&lt;/a&gt;1.常用部分&lt;/h2&gt;&lt;h3 id=&quot;1-1-标题&quot;&gt;&lt;a href=&quot;#1-1-标题&quot; class=&quot;headerlink&quot; title=&quot;1.1 标题&quot;&gt;&lt;/a&gt;1.1 标题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;[h1~h6]&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ~ ######&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般#作为文章大标题，只有一个，### 作为段落标题。&lt;br&gt;注：# 后面保持空格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下文标题(分级标题)&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AAA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;===&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BBB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：&lt;code&gt;=&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; 最少可以只写一个，兼容性一般&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TOC&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[TOC]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：根据标题生成目录，兼容性一般&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>男生如何养发护发？</title>
    <link href="http://www.liukaibang.com/2018/03/17/how-to-send-hair-care-for-boys/"/>
    <id>http://www.liukaibang.com/2018/03/17/how-to-send-hair-care-for-boys/</id>
    <published>2018-03-17T04:00:13.000Z</published>
    <updated>2018-03-17T04:10:17.826Z</updated>
    
    <content type="html"><![CDATA[<p>尽量选择不含硅且氨基酸发泡的洗发水。尽量避开以下成分：月桂酸聚醚硫酸酯钠、十二烷基硫酸钠、肉豆蔻酸异丙酯、矿油、聚二甲基硅氧烷。即使是有的话，也选择含量不要太高的。注意这里说的是洗发水，护发素中一般是含有硅的。<br>平时生活中注意以下几点：<br>1、减少精神压力：还要放松心情，不要让精神太紧绷，生活工作越是紧张忙碌，脱发的机会越高。因此，经常进行深呼吸，散步，做松驰体操等，可消除精神疲劳。此外，每天都应该保证有充足的睡眠，睡前用热水刨脚，这样不仅精力充沛，也利于头发的养护。<br>2、保持头发的清洁：对于男性脱发必须要保持毛发的清洁。对于脱发严重我们必须采取一定的措施，首先对于严重的脱发掉发我们能做到的便是保持头发的清洁。洗头时最好选用对头皮和头发温和无刺激性的酸性洗发水，可在水中滴几滴醋或放少许盐，温水正好，洗头的间隔最好是2～3天，洗发的同时需边搓边按摩。<br>3、补充营养：脱发的男士进行多补充一些营养，还要在平时多吃含铁、钙、锌等矿物质和维生素以及含蛋白质的食品，比如含有丰富蛋白质的鱼类、大豆、鸡蛋、瘦肉等以及含有丰富微量元素的海藻类、贝类富含维生素B2、B6的菠菜、芦笋、香蕉、猪肝等、都对保护头发、延缓老化有好处，也有利于头发的正常生长</p><p>参考资料<br>1.<a href="https://jingyan.baidu.com/article/20b68a8862b62f796cec62ac.html" target="_blank" rel="noopener">怎样才能生发养发</a><br>2.<a href="https://www.zhihu.com/question/35470998" target="_blank" rel="noopener">男生日常怎么护理头发？</a><br>3.<a href="https://www.zhihu.com/question/24887898/answer/108859901" target="_blank" rel="noopener">女生日常如何养发护发？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽量选择不含硅且氨基酸发泡的洗发水。尽量避开以下成分：月桂酸聚醚硫酸酯钠、十二烷基硫酸钠、肉豆蔻酸异丙酯、矿油、聚二甲基硅氧烷。即使是有的话，也选择含量不要太高的。注意这里说的是洗发水，护发素中一般是含有硅的。&lt;br&gt;平时生活中注意以下几点：&lt;br&gt;1、减少精神压力：还要放松心情，不要让精神太紧绷，生活工作越是紧张忙碌，脱发的机会越高。因此，经常进行深呼吸，散步，做松驰体操等，可消除精神疲劳。此外，每天都应该保证有充足的睡眠，睡前用热水刨脚，这样不仅精力充沛，也利于头发的养护。&lt;br&gt;2、保持头发的清洁：对于男性脱发必须要保持毛发的清洁。对于脱发严重我们必须采取一定的措施，首先对于严重的脱发掉发我们能做到的便是保持头发的清洁。洗头时最好选用对头皮和头发温和无刺激性的酸性洗发水，可在水中滴几滴醋或放少许盐，温水正好，洗头的间隔最好是2～3天，洗发的同时需边搓边按摩。&lt;br&gt;3、补充营养：脱发的男士进行多补充一些营养，还要在平时多吃含铁、钙、锌等矿物质和维生素以及含蛋白质的食品，比如含有丰富蛋白质的鱼类、大豆、鸡蛋、瘦肉等以及含有丰富微量元素的海藻类、贝类富含维生素B2、B6的菠菜、芦笋、香蕉、猪肝等、都对保护头发、延缓老化有好处，也有利于头发的正常生长&lt;/p&gt;
&lt;p&gt;参考资料&lt;br&gt;1.&lt;a href=&quot;https://jingyan.baidu.com/article/20b68a8862b62f796cec62ac.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;怎样才能生发养发&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;https://www.zhihu.com/question/35470998&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;男生日常怎么护理头发？&lt;/a&gt;&lt;br&gt;3.&lt;a href=&quot;https://www.zhihu.com/question/24887898/answer/108859901&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;女生日常如何养发护发？&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>消费者必备！65个实用投诉电话</title>
    <link href="http://www.liukaibang.com/2018/03/15/the-65-practical-complaint-calls-for-customer/"/>
    <id>http://www.liukaibang.com/2018/03/15/the-65-practical-complaint-calls-for-customer/</id>
    <published>2018-03-15T11:14:18.000Z</published>
    <updated>2018-03-15T11:54:19.041Z</updated>
    
    <content type="html"><![CDATA[<p>今年全国两会政府工作报告指出，“对各类侵害消费者权益的行为，要依法惩处、决不姑息”。就餐遭遇霸王条款，旅游碰上黑导游，网购买到假货，快递出了问题…3•15国际消费者权益日，65个投诉举报电话↓↓购物、旅游、金融、交通…总有你需要的。为自身权益，扩散！</p><h2 id="投诉举报"><a href="#投诉举报" class="headerlink" title="投诉举报"></a>投诉举报</h2><p>消费者投诉电话 12315<br>质量监督投诉电话 12365<br>价格举报电话 12358<br>国家旅游服务热线 12301<br>邮政行业消费者申诉电话 12305<br>文化市场举报热线 12318<br>食品药品安全投诉举报热线 12331<br>工信部申诉电话 12300<br>网络不良与垃圾信息举报 12321</p><h2 id="网购服务"><a href="#网购服务" class="headerlink" title="网购服务"></a>网购服务</h2><p>淘宝 0571-8815-8198<br>天猫 4008-608-608<br>支付宝 95188<br>京东 400-606-7733<br>一号店 400-007-1111<br>当当网 0527-80878888<br>亚马逊 400-810-5666（国内）</p><h2 id="快递服务"><a href="#快递服务" class="headerlink" title="快递服务"></a>快递服务</h2><p>EMS快递专递 11183<br>顺丰快递 95338<br>申通快递 95543<br>中通快递 95311<br>韵达快递 95546<br>圆通快递 95554<br>天天快递 400-188-8888<br>百世快递 95320<br>优速快递 400-111-1119<br>全峰快递 400-100-0001<br>宅急送   400-678-9000<br>速尔快递 400-158-9888</p><h2 id="通讯服务"><a href="#通讯服务" class="headerlink" title="通讯服务"></a>通讯服务</h2><p>中国移动 10086<br>中国联通 10010<br>中国电信 10000</p><h2 id="金融服务"><a href="#金融服务" class="headerlink" title="金融服务"></a>金融服务</h2><h3 id="银行"><a href="#银行" class="headerlink" title="银行"></a>银行</h3><p>中国工商 95588<br>中国农业 95599（400-669-5599）<br>中国银行 95566（400-669-5566）<br>中国建设 95533（400-820-0588）<br>邮政储蓄 95580（400-889-5580）<br>交通银行 95559（400-800-9888）<br>招商银行 95555（400-820-5555）<br>光大银行 95595（400-788-8888）<br>民生银行 95568（400-669-5568）<br>广发银行 95508（400-830-8003）</p><h3 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h3><p>中国人寿保险 95519<br>太平洋保险   95500<br>太平人寿保险 95589<br>中国人保财险 95518<br>平安保险     40088-95512</p><h2 id="出行服务"><a href="#出行服务" class="headerlink" title="出行服务"></a>出行服务</h2><h3 id="铁路航空"><a href="#铁路航空" class="headerlink" title="铁路航空"></a>铁路航空</h3><p>铁路客户服务中心 12306<br>中国航空 95583<br>南方航空 95539<br>东方航空 95530<br>深圳航空 95361<br>海南航空 95339<br>厦门航空 95557<br>山东航空 95369<br>四川航空 95378<br>春秋航空 95524</p><h3 id="用车"><a href="#用车" class="headerlink" title="用车"></a>用车</h3><p>滴滴打车 400-000-0999<br>神州租车 400-616-6666<br>一嗨租车 400-888-6608</p><h3 id="订票网站"><a href="#订票网站" class="headerlink" title="订票网站"></a>订票网站</h3><p>携程网 400-830-6666<br>艺龙网 400-933-3333<br>同程网 400-777-7777<br>途牛网 400-799-9999<br>芒果网 400-664-0066<br>去哪儿网 95117</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年全国两会政府工作报告指出，“对各类侵害消费者权益的行为，要依法惩处、决不姑息”。就餐遭遇霸王条款，旅游碰上黑导游，网购买到假货，快递出了问题…3•15国际消费者权益日，65个投诉举报电话↓↓购物、旅游、金融、交通…总有你需要的。为自身权益，扩散！&lt;/p&gt;
&lt;h2 id=&quot;投诉举报&quot;&gt;&lt;a href=&quot;#投诉举报&quot; class=&quot;headerlink&quot; title=&quot;投诉举报&quot;&gt;&lt;/a&gt;投诉举报&lt;/h2&gt;&lt;p&gt;消费者投诉电话 12315&lt;br&gt;质量监督投诉电话 12365&lt;br&gt;价格举报电话 12358&lt;br&gt;国家旅游服务热线 12301&lt;br&gt;邮政行业消费者申诉电话 12305&lt;br&gt;文化市场举报热线 12318&lt;br&gt;食品药品安全投诉举报热线 12331&lt;br&gt;工信部申诉电话 12300&lt;br&gt;网络不良与垃圾信息举报 12321&lt;/p&gt;
&lt;h2 id=&quot;网购服务&quot;&gt;&lt;a href=&quot;#网购服务&quot; class=&quot;headerlink&quot; title=&quot;网购服务&quot;&gt;&lt;/a&gt;网购服务&lt;/h2&gt;&lt;p&gt;淘宝 0571-8815-8198&lt;br&gt;天猫 4008-608-608&lt;br&gt;支付宝 95188&lt;br&gt;京东 400-606-7733&lt;br&gt;一号店 400-007-1111&lt;br&gt;当当网 0527-80878888&lt;br&gt;亚马逊 400-810-5666（国内）&lt;/p&gt;
&lt;h2 id=&quot;快递服务&quot;&gt;&lt;a href=&quot;#快递服务&quot; class=&quot;headerlink&quot; title=&quot;快递服务&quot;&gt;&lt;/a&gt;快递服务&lt;/h2&gt;&lt;p&gt;EMS快递专递 11183&lt;br&gt;顺丰快递 95338&lt;br&gt;申通快递 95543&lt;br&gt;中通快递 95311&lt;br&gt;韵达快递 95546&lt;br&gt;圆通快递 95554&lt;br&gt;天天快递 400-188-8888&lt;br&gt;百世快递 95320&lt;br&gt;优速快递 400-111-1119&lt;br&gt;全峰快递 400-100-0001&lt;br&gt;宅急送   400-678-9000&lt;br&gt;速尔快递 400-158-9888&lt;/p&gt;
&lt;h2 id=&quot;通讯服务&quot;&gt;&lt;a href=&quot;#通讯服务&quot; class=&quot;headerlink&quot; title=&quot;通讯服务&quot;&gt;&lt;/a&gt;通讯服务&lt;/h2&gt;&lt;p&gt;中国移动 10086&lt;br&gt;中国联通 10010&lt;br&gt;中国电信 10000&lt;/p&gt;
&lt;h2 id=&quot;金融服务&quot;&gt;&lt;a href=&quot;#金融服务&quot; class=&quot;headerlink&quot; title=&quot;金融服务&quot;&gt;&lt;/a&gt;金融服务&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 whole course detailed graphic original tutorial</title>
    <link href="http://www.liukaibang.com/2018/03/14/Sublime-Text-3-whole-course-detailed-graphic-original-tutorial/"/>
    <id>http://www.liukaibang.com/2018/03/14/Sublime-Text-3-whole-course-detailed-graphic-original-tutorial/</id>
    <published>2018-03-14T12:49:18.000Z</published>
    <updated>2018-03-14T12:49:18.887Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手把手教你使用Hexo和Github Pages搭建个人独立博客</title>
    <link href="http://www.liukaibang.com/2018/01/31/how-to-use-Hexo-and-GitHub-to-build-blog/"/>
    <id>http://www.liukaibang.com/2018/01/31/how-to-use-Hexo-and-GitHub-to-build-blog/</id>
    <published>2018-01-31T07:58:39.000Z</published>
    <updated>2018-01-31T15:07:26.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>下载Node.js<br>参考地址：<a href="http://www.nodejs.org" title="安装Node.js" target="_blank" rel="noopener">安装Node.js</a></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="noopener">http://git-scm.com/download/</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code class="bash">$ <span class="built_in">cd</span> d:/hexo$ npm install hexo-cli -g$ hexo init blog$ <span class="built_in">cd</span> blog$ npm install$ hexo g <span class="comment"># 或者hexo generate</span>$ hexo s <span class="comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span></code></pre><p>这里有必要提下Hexo常用的几个命令：</p><pre><code class="bash">$ hexo generate (hexo g) <span class="comment"># 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span>$ hexo server (hexo s) <span class="comment"># 启动本地web服务，用于博客的预览</span>$ hexo deploy (hexo d) <span class="comment"># 部署播客到远端（比如github, heroku等平台）</span></code></pre><p>另外还有其他几个常用命令：</p><pre><code class="bash">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span>$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span>$ npm update hexo -g <span class="comment">#更新hexo到最新版</span></code></pre><p>常用简写</p><pre><code class="bash">$ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy</code></pre><p>常用组合</p><pre><code class="bash">$ hexo d -g <span class="comment">#生成部署</span>$ hexo s -g <span class="comment">#生成预览</span></code></pre><p>现在我们打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。</p><h2 id="Hexo主题安装"><a href="#Hexo主题安装" class="headerlink" title="Hexo主题安装"></a>Hexo主题安装</h2><p>这里以主题yilia为例进行说明。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><pre><code class="bash">$ hexo clean$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><pre><code class="bash">$ <span class="built_in">cd</span> themes/yilia$ git pull$ hexo g <span class="comment"># 生成</span>$ hexo s <span class="comment"># 启动本地web服务器</span></code></pre><p>现在打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。</p><h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><h3 id="什么是Github-Pages"><a href="#什么是Github-Pages" class="headerlink" title="什么是Github Pages"></a>什么是Github Pages</h3><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问你的个人主页。</p><p>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</p><h3 id="创建自己的Github-Pages"><a href="#创建自己的Github-Pages" class="headerlink" title="创建自己的Github Pages"></a>创建自己的Github Pages</h3><p>注册GitHub及使用Github Pages的过程已经有很多文章讲过，在此不再详述。</p><h3 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h3><p>这一步恐怕是最关键的一步了，让我们把在本地web环境下预览到的博客部署到github上，然后就可以直接通过<a href="http://liukaibang.github.io" target="_blank" rel="noopener">http://liukaibang.github.io</a> 访问了。不过很多教程文章对这个步骤语焉不详，这里着重说下。</p><p>首先需要明白所谓部署到github的原理。</p><p>1.之前步骤中在Github上创建的那个特别的repo（liukaibang.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接<a href="http://liukaibang.github.io来直接访问。" target="_blank" rel="noopener">http://liukaibang.github.io来直接访问。</a><br>2.Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。<br>3.需要将hexo生成的静态网站，提交(git commit)到github上。<br>明白了原理，怎么做自然就清晰了。</p><h3 id="使用hexo-deploy部署"><a href="#使用hexo-deploy部署" class="headerlink" title="使用hexo deploy部署"></a>使用hexo deploy部署</h3><p>hexo deploy可以部署到很多平台，具体可以参考这个链接. 如果部署到github，需要在配置文件_config.xml中作如下修改：</p><pre><code class="bash">deploy:  <span class="built_in">type</span>: git  repo: git@github.com:liukaibang/liukaibang.github.io.git  branch: master</code></pre><p>然后在命令行中执行</p><pre><code class="bash">hexo d</code></pre><p>即可完成部署。</p><h4 id="踩坑提醒"><a href="#踩坑提醒" class="headerlink" title="踩坑提醒"></a>踩坑提醒</h4><p>1.注意需要提前安装一个扩展：</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><p>2.如果出现下面这样的错误，</p><pre><code class="bash">Permission denied (publickey).fatal: Could not <span class="built_in">read</span> from remote repository.Please make sure you have the correct access rightsand the repository exists.</code></pre><p>则是因为没有设置好public key所致。<br>在本机生成public key(参考github帮助)：</p><pre><code class="bash">＃ssh-keygen -t rsa -b 4096 -C <span class="string">"xxx@xxx.com"</span></code></pre><p>然后在#user_id/.ssh目录下会生成两个文件，id_rsa.pub和id_rsa.<br>然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。</p><h3 id="使用git命令行部署（optional）"><a href="#使用git命令行部署（optional）" class="headerlink" title="使用git命令行部署（optional）"></a>使用git命令行部署（optional）</h3><p>不幸的是，上述命令虽然简单方便，但是偶尔会有莫名其妙的问题出现，因此，我们也可以追本溯源，使用git命令来完成部署的工作。</p><h5 id="clone-github-repo"><a href="#clone-github-repo" class="headerlink" title="clone github repo"></a>clone github repo</h5><pre><code class="bash">$ <span class="built_in">cd</span> d:/hexo/blog$ git <span class="built_in">clone</span> https://github.com/liukaibang.github.io.git .deploy/liukaibang.github.io</code></pre><p>将我们之前创建的repo克隆到本地，新建一个目录叫做.deploy用于存放克隆的代码。</p><h3 id="创建一个deploy脚本文件"><a href="#创建一个deploy脚本文件" class="headerlink" title="创建一个deploy脚本文件"></a>创建一个deploy脚本文件</h3><pre><code class="bash">hexo generatecp -R public/* .deploy/liukaibang.github.io<span class="built_in">cd</span> .deploy/liukaibang.github.iogit add .git commit -m “update”git push origin master</code></pre><p>简单解释一下，hexo generate生成public文件夹下的新内容，然后将其拷贝至aidroid.github.io的git目录下，然后使用git commit命令提交代码到liukaibang.github.io这个repo的master branch上。</p><p>需要部署的时候，执行这段脚本就可以了（比如可以将其保存为deploy.sh）。执行过程中可能需要让你输入Github账户的用户名及密码，按照提示操作即可。</p><h2 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h2><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。<br>以我们使用的yilia主题为例，其提供如下的配置项（theme\yilia_config.yml）：</p><pre><code class="bash"><span class="comment"># Header</span>menu:  主页: /  所有文章: /archives  <span class="comment"># 随笔: /tags/随笔</span><span class="comment"># SubNav</span>subnav:  github: <span class="string">"#"</span>  weibo: <span class="string">"#"</span>  rss: <span class="string">"#"</span>  zhihu: <span class="string">"#"</span>  <span class="comment">#douban: "#"</span>  <span class="comment">#mail: "#"</span>  <span class="comment">#facebook: "#"</span>  <span class="comment">#google: "#"</span>  <span class="comment">#twitter: "#"</span>  <span class="comment">#linkedin: "#"</span>rss: /atom.xml<span class="comment"># Content</span>excerpt_link: morefancybox: <span class="literal">true</span>mathjax: <span class="literal">true</span><span class="comment"># Miscellaneous</span>google_analytics: <span class="string">''</span>favicon: /favicon.png<span class="comment">#你的头像url</span>avatar: <span class="string">""</span><span class="comment">#是否开启分享</span>share: <span class="literal">true</span><span class="comment">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><span class="comment">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span>duoshuo: <span class="literal">true</span><span class="comment">#是否开启云标签</span>tagcloud: <span class="literal">true</span><span class="comment">#是否开启友情链接</span><span class="comment">#不开启——</span><span class="comment">#friends: false</span><span class="comment">#是否开启“关于我”。</span><span class="comment">#不开启——</span><span class="comment">#aboutme: false</span><span class="comment">#开启——</span>aboutme: 我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…</code></pre><h2 id="其他高级使用技巧"><a href="#其他高级使用技巧" class="headerlink" title="其他高级使用技巧"></a>其他高级使用技巧</h2><h3 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h3><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>在你的域名注册提供商那里配置DNS解析，获取GitHub的IP地址点击，进入source目录下，添加CNAME文件</p><pre><code class="bash">$ <span class="built_in">cd</span> <span class="built_in">source</span>/$ touch CNAME$ vim CNAME <span class="comment"># 输入你的域名</span>$ git add CNAME$ git commit -m <span class="string">"add CNAME"</span></code></pre><h3 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h3><h4 id="使用七牛云存储"><a href="#使用七牛云存储" class="headerlink" title="使用七牛云存储"></a>使用七牛云存储</h4><p>自己在github上搭建的图床：<a href="http://liukaibang.github.io/qiniuimgbed/" target="_blank" rel="noopener">http://liukaibang.github.io/qiniuimgbed/</a> ，需要首先注册七牛账号使用。</p><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><h4 id="添加sitemap和feed插件"><a href="#添加sitemap和feed插件" class="headerlink" title="添加sitemap和feed插件"></a>添加sitemap和feed插件</h4><pre><code class="bash">$ npm install hexo-generator-feed$ npm install hexo-generator-sitemap</code></pre><p>修改_config.yml，增加以下内容</p><pre><code class="bash">//<span class="comment"># Extensions</span>Plugins:- hexo-generator-feed- hexo-generator-sitemap//<span class="comment">#Feed Atom</span>feed:  <span class="built_in">type</span>: atom  path: atom.xml  <span class="built_in">limit</span>: 20//<span class="comment">#sitemap</span>sitemap:  path: sitemap.xml</code></pre><p>配完之后，就可以访问<a href="http://liukaibang.github.io/atom.xml和http://liukaibang.github.io/sitemap.xml，发现这两个文件已经成功生成了。" target="_blank" rel="noopener">http://liukaibang.github.io/atom.xml和http://liukaibang.github.io/sitemap.xml，发现这两个文件已经成功生成了。</a></p><h3 id="添加404公益页面"><a href="#添加404公益页面" class="headerlink" title="添加404公益页面"></a>添加404公益页面</h3><p>GitHub Pages有提供制作404页面的指引：Custom 404 Pages。</p><p>直接在根目录下创建自己的404.html或者404.md就可以。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</p><h5 id="推荐使用腾讯公益404。"><a href="#推荐使用腾讯公益404。" class="headerlink" title="推荐使用腾讯公益404。"></a>推荐使用腾讯公益404。</h5><h3 id="添加about页面"><a href="#添加about页面" class="headerlink" title="添加about页面"></a>添加about页面</h3><pre><code class="bash">$ hexo new page <span class="string">"about"</span>之后在\<span class="built_in">source</span>\about\index.md目录下会生成一个index.md文件，打开输入个人信息即可，如果想要添加版权信息，可以在文件末尾添加：</code></pre><pre><code class="bash">&lt;div style=<span class="string">"font-size:12px;border-bottom: #ddd 1px solid; BORDER-LEFT: #ddd 1px solid; BACKGROUND: #f6f6f6; HEIGHT: 120px; BORDER-TOP: #ddd 1px solid; BORDER-RIGHT: #ddd 1px solid"</span>&gt;&lt;div style=<span class="string">"MARGIN-TOP: 10px; FLOAT: left; MARGIN-LEFT: 5px; MARGIN-RIGHT: 10px"</span>&gt;&lt;IMG alt=<span class="string">""</span> src=<span class="string">"https://avatars1.githubusercontent.com/u/168751?v=3&amp;s=140"</span> width=90 height=100&gt;&lt;/div&gt;&lt;div style=<span class="string">"LINE-HEIGHT: 200%; MARGIN-TOP: 10px; COLOR: #000000"</span>&gt;本文链接：&lt;a href=<span class="string">"&lt;%= post.link %&gt;"</span>&gt;&lt;%= post.title %&gt;&lt;/a&gt; &lt;br/&gt;作者： &lt;a href=<span class="string">"http://liukaibang.github.io/"</span>&gt;令狐葱&lt;/a&gt; &lt;br/&gt;出处： &lt;a href=<span class="string">"http://liukaibang.github.io/"</span>&gt;http://liukaibang.github.io/&lt;/a&gt;&lt;br/&gt;本文基于&lt;a target=<span class="string">"_blank"</span> title=<span class="string">"Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)"</span> href=<span class="string">"http://creativecommons.org/licenses/by-sa/4.0/"</span>&gt; 知识共享署名-相同方式共享 4.0 &lt;/a&gt;国际许可协议发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名 &lt;a href=<span class="string">"http://liukaibang.github.io/"</span>&gt;令狐葱&lt;/a&gt;及链接。&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="添加Fork-me-on-Github"><a href="#添加Fork-me-on-Github" class="headerlink" title="添加Fork me on Github"></a>添加Fork me on Github</h3><p><a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">获取代码</a>，选择你喜欢的代码添加到hexo/themes/yilia/layout/layout.ejs的末尾即可，注意要将代码里的you改成你的Github账号名。</p><h3 id="添加支付宝捐赠按钮及二维码支付"><a href="#添加支付宝捐赠按钮及二维码支付" class="headerlink" title="添加支付宝捐赠按钮及二维码支付"></a>添加支付宝捐赠按钮及二维码支付</h3><h4 id="支付宝捐赠按钮"><a href="#支付宝捐赠按钮" class="headerlink" title="支付宝捐赠按钮"></a>支付宝捐赠按钮</h4><p>在D:\hexo\themes\yilia\layout_widget目录下新建一个zhifubao.ejs文件，内容如下</p><pre><code class="bash">&lt;p class=<span class="string">"asidetitle"</span>&gt;打赏他&lt;/p&gt;&lt;div&gt;&lt;form action=<span class="string">"https://shenghuo.alipay.com/send/payment/fill.htm"</span> method=<span class="string">"POST"</span> target=<span class="string">"_blank"</span> accept-charset=<span class="string">"GBK"</span>&gt;    &lt;br/&gt;    &lt;input name=<span class="string">"optEmail"</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> value=<span class="string">"your 支付宝账号"</span> /&gt;    &lt;input name=<span class="string">"payAmount"</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> value=<span class="string">"默认捐赠金额(元)"</span> /&gt;    &lt;input id=<span class="string">"title"</span> name=<span class="string">"title"</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> value=<span class="string">"博主，打赏你的！"</span> /&gt;    &lt;input name=<span class="string">"memo"</span> <span class="built_in">type</span>=<span class="string">"hidden"</span> value=<span class="string">"你Y加油，继续写博客！"</span> /&gt;    &lt;input name=<span class="string">"pay"</span> <span class="built_in">type</span>=<span class="string">"image"</span> value=<span class="string">"转账"</span> src=<span class="string">"http://7xig3q.com1.z0.glb.clouddn.com/alipay-donate-website.png"</span> /&gt;&lt;/form&gt;&lt;/div&gt;</code></pre><p>添加完该文件之后，要在D:/hexo/themes/yilia/_config.yml文件中启用，如下所示，添加zhifubao</p><pre><code class="bash">widgets:- category- tag- links- tagcloud- zhifubao- rss</code></pre><h4 id="二维码捐赠"><a href="#二维码捐赠" class="headerlink" title="二维码捐赠"></a>二维码捐赠</h4><p>首先需要到这里获取你的支付宝账户的二维码图片，支付宝提供了自定义功能，可以添加自定义文字。</p><p>我的二维码扫描捐赠添加在about页面，当然你也可以添加到其它页面，在D:\hexo\blog\source\about下有index.md，打开，在适当位置添加</p><pre><code class="bash">&lt;center&gt;欢迎您捐赠本站，您的支持是我最大的动力！![][http://7xsxyo.com1.z0.glb.clouddn.com/2016/04/15/FoJ1F6Ht0CNaYuCdE2l52F-Fk9Vk202.png]&lt;/center&gt;&lt;br/&gt;</code></pre><p>可以让图片居中显示，注意将图片链接地址换成你的即可。</p><h4 id="添加百度站内搜索"><a href="#添加百度站内搜索" class="headerlink" title="添加百度站内搜索"></a>添加百度站内搜索</h4><p>点击进入，点击其它工具-&gt;站内检索-&gt;现在使用-&gt;新建搜索引擎-&gt;查看代码，将代码里的id值复制，打开/d/hexo/themes/jacman/_config.xml，配置成如下即可。</p><pre><code class="bash">baidu_search:     <span class="comment">## http://zn.baidu.com/</span>  <span class="built_in">enable</span>: <span class="literal">true</span>  id: <span class="string">"1433674487421172828"</span> <span class="comment">## e.g. "783281470518440642"  for your baidu search id</span>  site: http://zhannei.baidu.com/cse/search <span class="comment">## your can change to your site instead of the default site</span></code></pre><h4 id="使用不蒜子添加访客统计"><a href="#使用不蒜子添加访客统计" class="headerlink" title="使用不蒜子添加访客统计"></a>使用不蒜子添加访客统计</h4><p>详情参考搞定你的网站计数，具体做法很简单，就是在你的themes/your themes/layout/_partial/footer.ejs底部加入这段脚本</p><pre><code class="bash">&lt;script async src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</code></pre><p>然后在``中间添加如下统计信息即可</p><pre><code class="bash">本站总访问量 &lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt; 次, 访客数 &lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;&lt;/span&gt; 人次, 本文总阅读量 &lt;span id=<span class="string">"busuanzi_value_page_pv"</span>&gt;&lt;/span&gt; 次</code></pre><p>不蒜子的官方服务网站是不蒜子，目前最大的弊端就是不开放注册，所以对于运行了一段时间的网站，不蒜子的数据都是从1开始，没办法设置，只有等后期开放注册之后，登入网站才能对统计计数进行设置。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo主页</a><br><a href="https:www.liukaibang.com" target="_blank" rel="noopener">hexo你的博客</a><br><a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统环境配置&quot;&gt;&lt;a href=&quot;#系统环境配置&quot; class=&quot;headerlink&quot; title=&quot;系统环境配置&quot;&gt;&lt;/a&gt;系统环境配置&lt;/h2&gt;&lt;p&gt;要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，那就开始安装吧！&lt;/p&gt;
&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h3&gt;&lt;p&gt;下载Node.js&lt;br&gt;参考地址：&lt;a href=&quot;http://www.nodejs.org&quot; title=&quot;安装Node.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装Node.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h3&gt;&lt;p&gt;下载地址：&lt;a href=&quot;http://git-scm.com/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://git-scm.com/download/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; d:/hexo
$ npm install hexo-cli -g
$ hexo init blog
$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog
$ npm install
$ hexo g &lt;span class=&quot;comment&quot;&gt;# 或者hexo generate&lt;/span&gt;
$ hexo s &lt;span class=&quot;comment&quot;&gt;# 或者hexo server，可以在http://localhost:4000/ 查看&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里有必要提下Hexo常用的几个命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo generate (hexo g) &lt;span class=&quot;comment&quot;&gt;# 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹&lt;/span&gt;
$ hexo server (hexo s) &lt;span class=&quot;comment&quot;&gt;# 启动本地web服务，用于博客的预览&lt;/span&gt;
$ hexo deploy (hexo d) &lt;span class=&quot;comment&quot;&gt;# 部署播客到远端（比如github, heroku等平台）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.liukaibang.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello GitHub</title>
    <link href="http://www.liukaibang.com/2018/01/30/Hello-GitHub/"/>
    <id>http://www.liukaibang.com/2018/01/30/Hello-GitHub/</id>
    <published>2018-01-30T14:35:42.000Z</published>
    <updated>2018-01-30T14:38:37.455Z</updated>
    
    <content type="html"><![CDATA[<p>Hi World </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi World &lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.liukaibang.com/2018/01/30/hello-world/"/>
    <id>http://www.liukaibang.com/2018/01/30/hello-world/</id>
    <published>2018-01-30T13:58:51.194Z</published>
    <updated>2018-01-30T13:58:51.194Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
